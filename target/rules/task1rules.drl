//created on: 2017.03.29.
package onlab.event

global onlab.utility.FrequentRoutesToplistSet mostFrequentRoutes
global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas
//list any import classes here.

import onlab.positioning.*
import accumulate onlab.utility.MedianAccumulateFunction median

//declare any global variables here
declare TaxiLog
@role(event)
@timestamp(dropoff_datetime)
@expires( 31m )
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end


/*rule "ActiveRoute_rule"
	salience XXX
    when
        exists TaxiLog($pickupCell : pickup_cell , $dropoffCell : dropoff_cell) over window:time(30m)
    then
    	insertLogical(new ActiveRoute($pickupCell, $dropoffCell));
end



rule "TaxiLog_rule"

    when
        $tlog: TaxiLog($pickupCell : pickup_cell , $dropoffCell : dropoff_cell , $dropoffTime : dropoff_datetime   )
        $countOfRoutes : java.lang.Number(doubleValue > 0) from accumulate 
        			( TaxiLog( pickup_cell == $pickupCell , dropoff_cell == $dropoffCell, pickup_cell  != null, dropoff_cell != null) over window:time(30m),
        			count()
        			)
    then
    	
    	mostFrequentRoutes.add(new Route($pickupCell, $dropoffCell, $dropoffTime.getTime(), (java.lang.Long) $countOfRoutes));
    	
       
        

end

rule "TaxiLog_decrease"

    when
        $tick:Tick($currentTime : currentTime )
        $tlog:TaxiLog((dropoff_datetime.getTime() + 30 * 60 * 1000) < $currentTime)
    then
    
    	mostFrequentRoutes.decreaseRouteFrequency($tlog.getPickup_cell(), $tlog.getDropoff_cell());
    	retract($tick);
    	retract($tlog);	
       
        

end

rule "TaxiLog_rule2"

    when
        $tick:Tick($currentTime : currentTime )
        $tlog: TaxiLog((dropoff_datetime.getTime() + 15 * 60 * 1000) >= $currentTime, $pickupCell : pickup_cell , $dropoffCell : dropoff_cell , $dropoffTime : dropoff_datetime)
        $medianProfit : java.lang.Number(doubleValue > 0) from accumulate 
        			( TaxiLog($fare: fare_amount , $tip:tip_amount , (dropoff_datetime.getTime() + 15 * 60 * 1000) >= $currentTime, pickup_cell == $pickupCell) over window:time(15m);
        			median($fare.add($tip))
        			)
        $countOfEmptyTaxis: java.lang.Number(doubleValue > 0) from accumulate
        			(TaxiLog($license: hack_license , $dropoffTime2: dropoff_datetime , dropoff_cell == $pickupCell, (dropoff_datetime.getTime() + 30*60*1000) >= $currentTime ) and
        			not TaxiLog(hack_license.equals($license),  $dropoffTime2.before(dropoff_datetime)) ;
        				count()
        			
        			)
    then
    	mostProfitableAreas.add(new AreaWithProfit($pickupCell, $medianProfit.doubleValue() / $countOfEmptyTaxes.doubleValue(), $dropoffTime.getTime()));
    	
       
        

end

rule "TaxiLog_decrease2"

    when
        $tick:Tick($currentTime : currentTime )
    then
    	mostProfitableAreas.refresh($currentTime); 
       
        

end
*/
