
//created on: 2017.03.29.
package hu.bme.mit.entities




//list any import classes here.
import hu.bme.mit.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal
import java.util.ArrayList
//import hu.bme.mit.utility.CustomTreeMultiset



//declare any global variables here
global hu.bme.mit.toplist.ProfitableAreaToplistSet mostProfitableAreas
global hu.bme.mit.toplist.FrequentRoutesToplistSet mostFrequentRoutes



declare TaxiLog 
@role(event)
@timestamp(dropoff_datetime)
@expires( 31m )
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 999ms )
end




declare Route
@role(fact)
end


//Kitörli azokat a TaxiLog rekordokat, amikben nincs meg valamelyik cella, vagyis érvénytelenek. Priroritása miatt elõbb aktiválódik, mint a task1_newTaxiLog szabály
rule task1_removeInvalidTaxiLog
salience 2
	when
		$tlog: TaxiLog(!processed && (pickup_cell == null || dropoff_cell == null))
	then
		retract($tlog);
end

//Azokat az új TaxiLogokat feldolgozó szabály, amelyekhez tartozik út. Kitörli az utat a toplist-bõl, beállítja a megfelelõ értékeket,
//megnöveli a frequency értékét, majd visszateszi a toplist-be. Végül a processed flag-et true-ra állítja.
rule task1_newTaxiLogWithArea
salience 1
	when
			$tlog:TaxiLog( !processed, $pickupCell: pickup_cell, $dropoffCell: dropoff_cell, $dropoffDate: dropoff_datetime, $inserted : inserted)
			$route:Route(pickup_cell  == $pickupCell, dropoff_cell  == $dropoffCell)
	then
			
			mostFrequentRoutes.remove($route);
			$route.increaseFrequency();
			$route.setDelay(-1);
			$route.setInsertedForDelay($inserted);
			$route.setLastDropoffTime($dropoffDate);
			mostFrequentRoutes.add($route);
			$tlog.setProcessed(true);
			update($route);
			update($tlog);
end

//Az elõzõ szabályhoz hasonlóan az új TaxiLog-okra fut meg, de azokra, amelyekhez nem tartozik út.
//Létrehozza az utat a megfelelõ értékekkel, majd hozzáadja a toplistához, végül processed = true-ra állítja a TaxiLog-ot,
//és beilleszti a WM-be az új Route-ot.
rule task1_newTaxiLogWithoutArea
salience 0
	when
		$tlog:TaxiLog( !processed, $pickupCell: pickup_cell, $dropoffCell: dropoff_cell, $dropoffDate: dropoff_datetime, $inserted : inserted)
		not Route($pickupCell == pickup_cell, $dropoffCell == dropoff_cell)
	then
		Route $route = new Route($pickupCell, $dropoffCell,  $dropoffDate , 1);
		$route.setDelay(-1);
		$route.setInsertedForDelay($inserted);
		$tlog.setProcessed(true);
		mostFrequentRoutes.add($route);
		update($tlog);
		insert($route);
end




//A szabály aktiválódik minden olyan TaxiLog-ra, ami már több, mint fél órával régebbi az aktuális Tick-nél.
//Az adott TaxiLog-hoz tartozó útat törli a toplist-bõl, majd csökkenti a frequency-jét. Ha így már 0 a frequency, akkor kitörli a WM-bõl,
//egyéb esetben visszateszi a toplist-be. A végén a TaxiLog törlõdik a WM-bõl.
rule task1_removeTaxiLogsFromRoute 
salience -1
	when
		$tick: Tick($ctime : currentTime)
		$tlog:TaxiLog($pickupCell:pickup_cell, $dropoffCell:dropoff_cell ,  this before[30m1s, *] $tick )
		$route: Route(pickup_cell  == $pickupCell, dropoff_cell  == $dropoffCell)
	then
		mostFrequentRoutes.remove($route);
		$route.decreaseFrequency();
		if($route.getFrequency() <= 0){
			retract($route);
		} else{
			mostFrequentRoutes.add($route);
			update($route);
		}
		retract($tlog);
		
end



//For debug
query "routes"  ()

      routes: Route()
end

query "taxis"()
	taxis: TaxiLog()
end