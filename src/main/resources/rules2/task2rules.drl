//created on: 2017.03.29.
package onlab.event

global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas
//list any import classes here.

import onlab.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal;
import accumulate onlab.utility.MedianAccumulateFunction median

//declare any global variables here
declare TaxiLog
@role(event)
@timestamp(dropoff_datetime)
//@expires( 32m )
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end

declare RefreshArea
@role(event)
@timestamp(currentTime)
end

declare ActivateArea
@role(event)
end

declare ReOrderAreas
@role(event)
end

declare AreaWithProfit
@role(event)
@timestamp(lastInserted)
end

// TODO saliences



rule "new_TaxiLog_rule" 

    when
      $tlog: TaxiLog(!processed, $pickupCell: pickup_cell , $dropoffCell: dropoff_cell , $currentTime: dropoff_datetime )
      
    then
      $tlog.setProcessed(true); 
      update($tlog);
      insertLogical(new ActivateArea($pickupCell));
      insertLogical(new ActivateArea($dropoffCell));
      insertLogical(new RefreshArea($pickupCell,$currentTime));     
      insertLogical(new RefreshArea($pickupCell,$currentTime));

end



rule "ActivateAreaRule"

	when
		ActivateArea($cell : cell)
		not AreaWithProfit($cell == cell)
	then
		insert(new AreaWithProfit($cell));
end





rule "refreshAreaRule"

	when
		RefreshArea($ctime: currentTime, $cell:cell)
		$area:AreaWithProfit($cell == cell)
		$median : java.lang.Number(doubleValue > 0) from accumulate 
        			( TaxiLog($fare: fare_amount , $tip:tip_amount , pickup_cell == $cell) over window:time(15m);
        			median($fare.add($tip))
        			)
        $taxiListOfArea: java.util.ArrayList() from collect (TaxiLog(dropoff_cell == $cell) over window:time(30m))
	then	
	
		int $numOfEmptyTaxis= 0;
		for(Object $o : $taxiListOfArea){
			TaxiLog $tlog = (TaxiLog)$o;
			QueryResults results =
    		kcontext.getKnowledgeRuntime().getQueryResults( "newerRidesOfDriver", new Object[]{$tlog.getHack_license(), $tlog.getDropoff_datetime()} );
    		if(results.size() == 0){
    			$numOfEmptyTaxis++;
    		}
		}
		
		BigDecimal $medianProfit = ((BigDecimal)$median).divide(($numOfEmptyTaxis == 0 ? BigDecimal.ONE : BigDecimal.valueOf($numOfEmptyTaxis)));
		if(!$medianProfit.equals($area.getMedianProfit())){
			$area.setMedianProfit($medianProfit);
			$area.setLastInserted($ctime);
		}
		
		mostProfitableAreas.add($area);
end



query "newerRidesOfDriver"  (String $license, java.util.Date $threshold)

      $tlog: TaxiLog(hack_license.equals($license) , $threshold.before(dropoff_datetime) )
end




rule "remove_TaxiLog_from_pickupCell"

    when
        $tick:Tick($currentTime : currentTime )
        $tlog:TaxiLog(dropoff_datetime.getTime() + 15 * 60 * 1000 < $currentTime, !olderThanAQuarter, $pickupCell : pickup_cell)
    then
    	$tlog.setOlderThanAQuarter(true);
    	update($tlog);
    	insertLogical(new RefreshArea($pickupCell, new java.util.Date($currentTime)));
       	insertLogical(new ReOrderAreas());
        

end

rule "remove_TaxiLog_from_WM"

    when
        $tick:Tick($currentTime : currentTime )
        $tlog:TaxiLog(dropoff_datetime.getTime() + 30 * 60 * 1000 < $currentTime, $dropoffCell : dropoff_cell)
    then
    	retract($tlog);
    	insertLogical(new RefreshArea($dropoffCell, new java.util.Date($currentTime)));
       	insertLogical(new ReOrderAreas());
        

end

rule "ReorderAreas_rule"
	when
		ReOrderAreas()
		$areas:  java.util.ArrayList() from collect( AreaWithProfit() )
	then
		mostProfitableAreas.addAll($areas);
end	


rule "removeAreaFromWM"
	when
		Tick($currentTime : currentTime )
		$area:AreaWithProfit(lastInserted.getTime() + 30 * 60 * 1000 < $currentTime)
	then
		retract($area);
		insertLogical(new ReOrderAreas());
end



