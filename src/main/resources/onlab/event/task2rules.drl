
//created on: 2017.03.29.
package onlab.event




//list any import classes here.
//import accumulate MedianAccumulateFunction medianf
import onlab.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal
import java.util.ArrayList
import java.util.Date
import accumulate onlab.utility.MedianAccumulateFunction median


//declare any global variables here
global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas



declare TaxiLog
@role(event)
@timestamp(dropoff_datetime)
@expires( 31m )
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end



declare RefreshAreaMedian
cell : Cell
insertTime : long
end

declare RefreshAreaCount
cell : Cell
license : String
insertTime : long
end

declare ActivateArea
@role(fact)
end


declare AreaWithProfit
@role(event)
@timestamp(lastInserted)
end


rule task1_removeInvalidTaxiLog
salience 1
	when
		$tlog: TaxiLog(pickup_cell == null || dropoff_cell == null || fare_amount.compareTo(BigDecimal.ZERO) > 0)
	then
		retract($tlog);
end

rule "task2_new_TaxiLog_rule" 
salience 0
    when
      $tlog: TaxiLog(!processed, $pickupCell: pickup_cell , $dropoffCell: dropoff_cell , $currentTime: dropoff_datetime , $inserted: inserted, $hack_license: hack_license )
      
    then
     
      insertLogical(new ActivateArea($pickupCell, $currentTime));
      insert(new RefreshAreaMedian($pickupCell, $currentTime.getTime()));
      insert(new RefreshAreaCount($dropoffCell, $hack_license, $currentTime.getTime()));
      $tlog.setProcessed(true); 
      update($tlog);

end


rule "task2_activateArea_rule"
salience 1
	when 
		$activateArea:ActivateArea($pickupCell: cell, $currentTime : currentTime)
		not AreaWithProfit(cell == $pickupCell)
	then
		insert(new AreaWithProfit($pickupCell, $currentTime));
		retract($activateArea);
end

rule "task2_refreshAreaMedian_rule"
salience -1
	when
		RefreshAreaMedian($cell:cell)
		$area:AreaWithProfit(cell == $cell)
		$refList: ArrayList() from collect (RefreshAreaMedian($cell == cell))
		$medianOfCell: BigDecimal() from accumulate 
				(TaxiLog(pickup_cell == $cell, $fare:fare_amount, $tip:tip_amount) over window:time(15m), 
					median($fare.add($tip)))		
	then
		if($medianOfCell.compareTo(BigDecimal.ZERO) == 0){
			mostProfitableAreas.remove($area);
			retract($area);
			for(Object $o : $refList){
				retract($o);
			}
		} else{
			long $ctime = -1;
			for(Object $o : $refList){
				RefreshAreaMedian $ram = (RefreshAreaMedian) $o;
				if($ram.getInsertTime() > -1){
					$ctime = $ram.getInsertTime();
				}
				retract($o);
			}
			if($ctime != -1){
				$area.setLastInserted(new Date($ctime));
			}
			$area.setMedianProfit($medianOfCell);
			mostProfitableAreas.add($area);
		}	
end

rule "task2_refreshAreaCount_rule"
salience -1
	when
		RefreshAreaCount($cell:cell)
		$area:AreaWithProfit(cell == $cell)
	then
		$area.increaseCountOfTaxes();
end











query "task2_ridesOfDriver"  (String $license, java.util.Date $threshold)

      tlog:TaxiLog(hack_license.equals($license) , $threshold.before(dropoff_datetime) )
end

//For debug
query "areas"  ()

      areas:AreaWithProfit()
end

query "taxis"()
	taxis: TaxiLog()
end

