package onlab.event




//list any import classes here.
//import accumulate MedianAccumulateFunction medianf
import onlab.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal
import java.util.ArrayList
import java.util.Date
import accumulate onlab.utility.MedianAccumulateFunction median


//declare any global variables here
global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas
 


declare TaxiLog 
@role(event)
@timestamp(dropoff_datetime)
@expires( 30m 1s)
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end



declare RefreshAreaMedian
cell : Cell
insertTime : long
end

declare RefreshAreaCount
cell : Cell
license : String
insertTime : long
end

declare ActivateArea
@role(fact)
end

declare TaxiLocation
@role(event)
cell:Cell
license:String
currentTime:Date @timestamp
end


declare AreaWithProfit
@role(event)
@timestamp(lastInserted)
end


rule task2_removeInvalidTaxiLog
salience 1
	when
		$tlog: TaxiLog(pickup_cell == null || dropoff_cell == null || fare_amount.compareTo(BigDecimal.ZERO) < 1)
	then
		
		retract($tlog);
end

rule "task2_new_TaxiLog_rule" 
salience 0
    when
      $tlog: TaxiLog(!processed, $pickupCell: pickup_cell , $dropoffCell: dropoff_cell , $currentTime: dropoff_datetime , $inserted: inserted, $hack_license: hack_license )
      
    then
    
      insertLogical(new ActivateArea($pickupCell, $currentTime));
      insertLogical(new ActivateArea($dropoffCell, $currentTime));
      insert(new RefreshAreaMedian($pickupCell, $currentTime.getTime()));
      insert(new RefreshAreaCount($dropoffCell, $hack_license, $currentTime.getTime()));
      $tlog.setProcessed(true); 
      update($tlog);

end


rule "task2_activateArea_rule"
salience 1
	when 
		$activateArea:ActivateArea($pickupCell: cell, $currentTime : currentTime)
		not AreaWithProfit(cell == $pickupCell)
	then
		
		insert(new AreaWithProfit($pickupCell, $currentTime));
end

rule "task2_refreshAreaMedian_rule"
salience -1
	when
		$tick:Tick(  )
		RefreshAreaMedian($cell:cell)
		$area:AreaWithProfit(cell == $cell)
		$refList: ArrayList() from collect (RefreshAreaMedian($cell == cell))
		$medianOfCell: BigDecimal() from accumulate 
				(TaxiLog(pickup_cell == $cell, $fare:fare_amount, $tip:tip_amount,this before[0m,15m] $tick), 
					median($fare.add($tip)))					
	then
		
		
		//Ez itt úgy tûnik, hogy holtág, nem fut a medián, ha nem kap taxilogot, így ZERO medián sem lehet. Vagy mégsem.
		if($medianOfCell.compareTo(BigDecimal.ZERO) == 0){
			////System.out.println("what??????");
			mostProfitableAreas.remove($area);
			$area.setMedianProfit($medianOfCell);
			update($area);
			for(Object $o : $refList){
				retract($o);
			}
		} else{
			//System.out.println("task2_RefreshAreaMedian" + $medianOfCell);
			mostProfitableAreas.remove($area);
			long $ctime = -1;
			for(Object $o : $refList){
				RefreshAreaMedian $ram = (RefreshAreaMedian) $o;
				if($ram.getInsertTime() > -1){
					$ctime = $ram.getInsertTime();
				}
				retract($o);
			}
			if($ctime != -1){
				$area.setLastInserted(new Date($ctime));
			}
			
			$area.setMedianProfit($medianOfCell);
			update($area);
			mostProfitableAreas.add($area);
		}	
end

//Ez azért kell, mert a másik refresh nem fut le, ha nincs már TaxiLog a területhez 15 percen belül. A prioritása szigorúan kisebb, mint a refreshAreaMedian rule-nak.
rule "task2_RefreshAreaMedianToNull"
salience -2
	when
		Tick()
		RefreshAreaMedian($cell:cell)
		$area:AreaWithProfit(cell == $cell)
		$refList: ArrayList() from collect (RefreshAreaMedian($cell == cell))
	then
		//System.out.println("task2_RefreshAreaMedianToNull");
		mostProfitableAreas.remove($area);
		$area.setMedianProfit(BigDecimal.ZERO);
		for(Object $o : $refList){
			retract($o);
		}
end


rule "task2_increaseAreaCount_rule"
salience -1
	when
		$ref:RefreshAreaCount($cell:cell, $time:insertTime, $license:license)
		$area:AreaWithProfit( $cell==cell )
	then 
		mostProfitableAreas.remove($area);
		$area.increaseCountOfTaxes();
		if($time > -1){
			$area.setLastInserted(new Date($time));
		}
		
		update($area);
		mostProfitableAreas.add($area);
		insert(new TaxiLocation($cell, $license, new Date($time)));    	 
		retract($ref);
end


rule "task2_decreaseTaxiCountOnDriversPreviousCell"
salience -2
	when
		$newTlocation: TaxiLocation($license:license)
		$oldTlocation: TaxiLocation(license.equals($license), $cell:cell, this before $newTlocation)
		$area:AreaWithProfit( cell == $cell )
	then
	//	//System.out.println("task2_decreaseTaxiCountOnDriversPreviousCell");
		mostProfitableAreas.remove($area);
		$area.decreaseCountOfTaxes();
		update($area);
		mostProfitableAreas.add($area);
		retract($oldTlocation);
end

rule "task2_expiringTaxiLocationRule"
salience 1
	when
		$tick:Tick()
		$tlocation:TaxiLocation($cell:cell, this before[30m,*] $tick)
		$area:AreaWithProfit( cell == $cell )
	then
	//	//System.out.println("expiringTaxiLocation");
		mostProfitableAreas.remove($area);
		$area.decreaseCountOfTaxes();
		update($area);
		mostProfitableAreas.add($area);
		
		retract($tlocation);
end
	
rule "task2_refreshMedianAfter15Min"
salience 1
	when
		$tick:Tick()
		$tlog:TaxiLog(!olderThanAQuarter, this before[901s,*] $tick)	
	then
		
		$tlog.setOlderThanAQuarter(true);
		update($tlog);	
		insert(new RefreshAreaMedian($tlog.getPickup_cell(), -1));
end

rule "taxsk2_deactivateArea"
salience -5
	when
		$tick:Tick(  )
		$area: AreaWithProfit(countOfTaxes == 0, medianProfit.compareTo(BigDecimal.ZERO)<1, this before[30m1s,*] $tick )
	then
		mostProfitableAreas.remove($area);
		retract($area);
end
		





query "task2_ridesOfDriver"  (String $license, java.util.Date $threshold)

      tlog:TaxiLog(hack_license.equals($license) , $threshold.before(dropoff_datetime) )
end

//For debug
query "areas"  ()

      areas:AreaWithProfit()
end

query "taxis"()
	taxis: TaxiLog()
end