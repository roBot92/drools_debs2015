
//created on: 2017.03.29.
package onlab.event



/*
//list any import classes here.
import onlab.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal
import java.util.ArrayList
//import onlab.utility.CustomTreeMultiset



//declare any global variables here
global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas
global onlab.utility.FrequentRoutesToplistSet mostFrequentRoutes



declare TaxiLog
@role(event)
@timestamp(dropoff_datetime)
@expires(31m)
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end


declare ActivateRoute
@role(fact)
end

declare RefreshRoute
@role(fact)
//@expires(1s)
end

declare Route
@role(event)
@timestamp(lastDropoffTime)
end

declare ReOrderRoutes
@role(fact)
end


rule task1_removeInvalidTaxiLog
salience 1
	when
		$tlog: TaxiLog(pickup_cell == null || dropoff_cell == null)
	then
		retract($tlog);
end

rule task1_newTaxiLog
salience 0
	when
			$tlog:TaxiLog( !processed, $pickupCell: pickup_cell, $dropoffCell: dropoff_cell, $dropoffDate: dropoff_datetime, $inserted : inserted)
	then
			//System.out.println("newTaxiLog");
			insertLogical(new ActivateRoute($pickupCell, $dropoffCell,$dropoffDate));
			insert(new RefreshRoute($pickupCell, $dropoffCell, $dropoffDate.getTime(), $inserted));
			$tlog.setProcessed(true);
			update($tlog);
end

 
rule task1_activateRoute
salience 10
	when
		ActivateRoute($pickupCell : pickup_cell, $dropoffCell: dropoff_cell, $ctime : lastInserted)
		not Route($pickupCell == pickup_cell, $dropoffCell == dropoff_cell)
	then
		//System.out.println("activateRoute");
		insert(new Route($pickupCell, $dropoffCell, $ctime , 1));
end


rule task1_refreshRoute
salience -1
	when
		 $ref:RefreshRoute($pickupCell : pickup_cell, $dropoffCell : dropoff_cell )
		 $route: Route($pickupCell == pickup_cell, $dropoffCell == dropoff_cell)
		 $refList: ArrayList() from collect( RefreshRoute(pickup_cell == $pickupCell, dropoff_cell == $dropoffCell) )
		 $countOfRoutes : java.lang.Number() from accumulate (
			TaxiLog($pickupCell == pickup_cell, $dropoffCell == dropoff_cell ) over window:time(30m),
			count()
		 )
		
	then
		if($countOfRoutes.intValue() == 0){
			mostFrequentRoutes.remove($route);
			retract($route);
			for(Object $o : $refList){
				retract($o);
			}
		} else{
			long $ctime = -1;
			for(Object $o : $refList){
				RefreshRoute $rr = (RefreshRoute) $o;
				if($rr.getCurrentTime() > -1){
					$ctime = $rr.getCurrentTime();
				}
				retract($o);
			}
			if($ctime != -1){
			$route.setLastDropoffTime(new java.util.Date($ctime));
			$route.setDelay(-1);
		 	}
		 $route.setFrequency($countOfRoutes.longValue());
		 update($route);
		 mostFrequentRoutes.add($route);
		}
		
end



rule task1_removeTaxiLogsFromRoute 
salience 4
	when
		$tick: Tick($ctime : currentTime)
		exists TaxiLog( this before[30m , 999m] $tick) 
		$tlogs: ArrayList() from collect( TaxiLog( this before[30m , 999m] $tick) )//
	then
		//System.out.println("removeTaxiLogsFromRoute");
		for(Object $o : $tlogs){
			//System.out.println("removeTaxiLogsFromRoute removed:" + $o);
			TaxiLog $tlog = (TaxiLog) $o;
			insert(new RefreshRoute($tlog.getPickup_cell(), $tlog.getDropoff_cell(), -1, -1));
			retract($o);
		}		
end



//For debug
query "routes"  ()

      routes: Route()
end

query "taxis"()
	taxis: TaxiLog()
end

query "refresh"
	refresh: RefreshRoute()
end*/