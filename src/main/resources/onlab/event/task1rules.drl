/*
//created on: 2017.03.29.
package onlab.event




//list any import classes here.
//import accumulate MedianAccumulateFunction medianf
import onlab.positioning.*
import org.kie.api.runtime.rule.QueryResults
import java.math.BigDecimal
import java.util.ArrayList
//import onlab.utility.CustomTreeMultiset



//declare any global variables here
global onlab.utility.ProfitableAreaToplistSet mostProfitableAreas
global onlab.utility.FrequentRoutesToplistSet mostFrequentRoutes



declare TaxiLog
@role(event)
@timestamp(dropoff_datetime)
end

declare Tick
@role(event)
@timestamp(currentTime)
@expires( 1s )
end


declare ActivateRoute
@role(fact)
end

declare RefreshRoute
@role(fact)
//@expires(1s)
end

declare Route
@role(fact)
//@timestamp(lastDropoffTime)
end

declare ReOrderRoutes
@role(fact)
end


rule task1_removeInvalidTaxiLog
salience 1
	when
		$tlog: TaxiLog(pickup_cell == null || dropoff_cell == null)
	then
		retract($tlog);
end

rule task1_newTaxiLog
salience 0
	when
			$tlog:TaxiLog( !processed, $pickupCell: pickup_cell, $dropoffCell: dropoff_cell, $dropoffDate: dropoff_datetime, $inserted : inserted)
	then
			
			insertLogical(new ActivateRoute($pickupCell, $dropoffCell,$dropoffDate));
			insertLogical(new RefreshRoute($pickupCell, $dropoffCell, $dropoffDate.getTime(), $inserted));
			$tlog.setProcessed(true);
			update($tlog);
end

 
rule task1_activateRoute
salience 10
	when
		ActivateRoute($pickupCell : pickup_cell, $dropoffCell: dropoff_cell, $ctime : lastInserted)
		not Route($pickupCell == pickup_cell, $dropoffCell == dropoff_cell)
	then
		insert(new Route($pickupCell, $dropoffCell, $ctime , 1));
end


rule task1_refreshRoute
salience 20
	when
		 $ref:RefreshRoute($pickupCell : pickup_cell, $dropoffCell : dropoff_cell, $ctime: currentTime , $insertedForDelay : insertedForDelay )
		 $route: Route($pickupCell == pickup_cell, $dropoffCell == dropoff_cell)
		 $countOfRoutes : java.lang.Number() from accumulate (
			TaxiLog($pickupCell == pickup_cell, $dropoffCell == dropoff_cell ) over window:time(30m),
			count()
		 ) 
	then
		
		 if($ctime != -1){
			$route.setLastDropoffTime(new java.util.Date($ctime));
			$route.setInsertedForDelay($insertedForDelay);
			$route.setDelay(-1);
		 }
		 $route.setFrequency($countOfRoutes.longValue());
		 update($route);
		 mostFrequentRoutes.add($route);
		retract($ref);
		
end

rule task1_reOrderRoutes
salience -1
	when
		ReOrderRoutes()
		$allReorderCollection: java.util.ArrayList() from collect (ReOrderRoutes())
		$routes: ArrayList() from collect (Route())
						
	then
		 mostFrequentRoutes.clear();
		 if($routes != null){
			mostFrequentRoutes.addAll($routes);
			$routes.clear();
		 }
		 for(Object $reorder : $allReorderCollection){
			retract($reorder);
		 }		 //$allReorderCollection.clear();
end

rule task1_deactivateRoute
salience 20
	when
		Tick($ctime : currentTime)
		$route:Route(lastDropoffTime.getTime() + 30 * 60 * 1000 < $ctime || frequency == 0)
	then
		retract($route);
		insert(new ReOrderRoutes());
		
end

rule task1_removeTaxiLogsFromRoute
salience 4
	when
		Tick($ctime : currentTime)
		$tlogs: ArrayList() from collect( TaxiLog( dropoff_datetime.getTime() + 30 * 60 *1000 < $ctime))
	then
		for(Object o : $tlogs){
			TaxiLog $tlog = (TaxiLog)o;
			Cell $pickupCell = $tlog.getPickup_cell();
			Cell $dropoffCell = $tlog.getDropoff_cell();
			retract($tlog);
			insertLogical(new RefreshRoute($pickupCell, $dropoffCell, -1, -1));
		}
		
		
		if($tlogs != null && !$tlogs.isEmpty()){
			insert(new ReOrderRoutes());
		}
		
end



//For debug
query "routes"  ()

      routes: Route()
end

query "taxis"()
	taxis: TaxiLog()
end

query "refresh"
	refresh: RefreshRoute()
end*/